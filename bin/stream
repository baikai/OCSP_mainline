#!/bin/bash

#***********************************************************************
# Script  : stream
# Version : 2.0.1
# OCSP
#***********************************************************************

STREAM_HOME=$(cd `dirname $0`/..; pwd)
. ${STREAM_HOME}/bin/Utilities.sh

function print_usage(){
  echo "Usage: stream [COMMAND]"
  echo "  where COMMAND is one of:"
  echo "  start                                 run the stream application"
  echo "  stop                                  shutdown the stream application"
  echo "  version                               print the version"
}


function startStream(){
    out "Starting the server..."

    CLASSPATH=`getClassPath`

    nohup java -cp ${CLASSPATH} com.asiainfo.ocdp.stream.manager.MainFrameManager &>> ${STREAM_HOME}/logs/MainFrameManager.log&
    pid=`echo $!`

    sleep 1

    ps -p ${pid} > /dev/null 2>&1

    if [ $? -eq 0 ]; then
        echo ${pid} > ${STREAM_HOME}/logs/stream_pid.log
        success "Start the server successfully."
        success "Please check log ${STREAM_HOME}/logs/MainFrameManager.log for details."
    else
        error "Start the server failed!"
        error "Please check log ${STREAM_HOME}/logs/MainFrameManager.log for error messages."
    fi
}

function stopStream(){
    proc_id=`cat ${STREAM_HOME}/logs/stream_pid.log`
    if [[ -z ${proc_id} ]];then
        out "The server is not running ! "
    else
         out "Stopping the server..."
         for id in ${proc_id[*]}
         do
           kill ${id}

           if [ $? -eq 0 ];then
                success "Stop the server successfully."
                echo > ${STREAM_HOME}/logs/stream_pid.log
           else
                error "Stop the server failed! "
                error "Please check log ${STREAM_HOME}/logs/MainFrameManager.log for error messages."
           fi
         done
    fi
}

function getClassPath(){
    JAVA_OPTS="-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$STREAM_HOME/logs/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$STREAM_HOME/logs/"

    for jarFile in `ls ${STREAM_HOME}/lib/*jar`
    do
    CLASSPATH=${CLASSPATH}:${jarFile}
    done

    echo ${CLASSPATH}
}

function print_version(){
    CLASSPATH=`getClassPath`

    java -cp ${CLASSPATH} com.asiainfo.ocdp.stream.common.VersionInfo
}

if [ $# -eq 0 ]; then
    print_usage;
elif [ $# -eq 1 ]; then
    case $1 in
    start)
        startStream;;
    stop)
        stopStream;;
    version)
        print_version;;
    --help|-help|-h)
        print_usage;;
    *)
        error "Invalid argument, please refer to: "
        print_usage;;
    esac
else
    print_usage
fi

exit 0;